package Libraries.Interface.Accessibility

use Libraries.Interface.Item
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Events.TreeChangeEvent
use Libraries.Interface.Events.TreeTableChangeEvent
use Libraries.Interface.Events.ControlActivationEvent
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Interface.Events.WindowFocusEvent
use Libraries.Interface.Controls.Button
use Libraries.Interface.Controls.ToggleButton
use Libraries.Interface.Controls.TextField
use Libraries.Interface.Events.ProgressBarValueChangedEvent
use Libraries.Interface.Accessibility
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Interface.Item3D
use Libraries.Containers.Iterator
use Libraries.Interface.Item2D
use Libraries.Containers.Array
use Libraries.Game.GameStateManager
use Libraries.Game.GameDisplay
use Libraries.Game.Game
use Libraries.Containers.HashTable
use Libraries.Interface.Controls.ProgressBar
use Libraries.Interface.Controls.MenuItem
use Libraries.Interface.Controls.TreeItem
use Libraries.Interface.Controls.TreeTableRow
use Libraries.Interface.Controls.TreeTableCell
use Libraries.Game.DesktopDisplay
use Libraries.Game.Shapes.Rectangle


class AccessKitAccessibility is Accessibility
    integer rootName = 1
    HashTable<integer, Item> rootItems
    boolean regenerateRoot = false
    HashTable<integer, Item> edits
    Item focus = undefined

    // Used to associate accessibility codes with role values.
    HashTable<integer, text> roleTable

    on create
        // Used to get the accessibility code constants
        Item2D temp

        roleTable:Add(temp:parent:Item:NOT_ACCESSIBLE, "presentation")
        roleTable:Add(temp:parent:Item:ITEM, "unknown")
        roleTable:Add(temp:parent:Item:CUSTOM, "unknown")
        roleTable:Add(temp:parent:Item:CHECKBOX, "checkBox")
        roleTable:Add(temp:parent:Item:RADIO_BUTTON, "radioButton")
        roleTable:Add(temp:parent:Item:BUTTON, "button")
        roleTable:Add(temp:parent:Item:TOGGLE_BUTTON, "toggleButton")
        roleTable:Add(temp:parent:Item:TEXTBOX, "inlineTextBox")
        roleTable:Add(temp:parent:Item:MENU_BAR, "menu")
        roleTable:Add(temp:parent:Item:MENU_ITEM, "menuItem")
        roleTable:Add(temp:parent:Item:PANE, "pane")
        roleTable:Add(temp:parent:Item:TREE, "tree")
        roleTable:Add(temp:parent:Item:TREE_ITEM, "treeItem")
        roleTable:Add(temp:parent:Item:TOOLBAR, "toolbar")
        roleTable:Add(temp:parent:Item:TAB, "tab")
        roleTable:Add(temp:parent:Item:TAB_PANE, "tabPanel")
        roleTable:Add(temp:parent:Item:TABLE, "table")
        roleTable:Add(temp:parent:Item:CELL, "cell")
        roleTable:Add(temp:parent:Item:TEXT_FIELD, "textField")
        roleTable:Add(temp:parent:Item:LIST, "list")
        roleTable:Add(temp:parent:Item:LIST_ITEM, "listItem")
        roleTable:Add(temp:parent:Item:TREE_TABLE, "treeGrid")
        roleTable:Add(temp:parent:Item:DIALOG, "dialog")
        roleTable:Add(temp:parent:Item:POPUP_MENU, "menuListPopup")
        roleTable:Add(temp:parent:Item:PROGRESS_BAR, "progressIndicator")
        roleTable:Add(temp:parent:Item:TREE_TABLE_CELL, "cell")
        roleTable:Add(temp:parent:Item:GROUP, "group")
    end

    private action ItemEdited(Item item)
        if item:GetAccessibilityCode() = item:NOT_ACCESSIBLE or item:IsOnLayer() = false
            return now
        end

        edits:Add(item:GetHashCode(), item)
    end

    action NameChanged(Item item)
        ItemEdited(item)
    end

    action DescriptionChanged(Item item)
        ItemEdited(item)
    end

    action TextFieldUpdatePassword(TextField item)
        ItemEdited(item)
    end

    action Update
        JavaScriptObjectNotation nodes = GenerateNodes()

        JavaScriptObjectNotation focus = GenerateFocus()

        if nodes not= undefined or focus not= undefined
            JavaScriptObjectNotation note
            note:SetPrettyPrint(true)

            if nodes not= undefined 
                note:Add(nodes)
            else 
                JavaScriptObjectNotation nodes2
                nodes2:SetArray()
        
                nodes2:SetKey("nodes")
                nodes = nodes2
                note:Add(nodes)
            end

            if focus not= undefined

                note:Add(focus)
            end


            note:SetPrettyPrint(true)
            output note:ToText()
            UpdateNative(note:ToText())
        end
    end

    private system action UpdateNative(text json)

    private action GenerateNodes returns JavaScriptObjectNotation
        if not edits:IsEmpty()
    
            JavaScriptObjectNotation nodes
            nodes:SetArray()
    
            nodes:SetKey("nodes")
    
            Iterator<Item> items = edits:GetValueIterator()
            repeat while items:HasNext() 
                Item item = items:Next()
                AddItemToJavaScriptObjectNotation(nodes, item)
            end
    
            RegenerateRoot(nodes)

            nodes:SetPrettyPrint(true)
            //output nodes:ToText()
            
            edits:Empty()
            return nodes
        end
        return undefined
    end

    private action GenerateFocus returns JavaScriptObjectNotation
        GameStateManager manager
        Item recent = manager:GetFocus()
        if recent not= focus
            JavaScriptObjectNotation tree = GenerateTree()
            tree:SetPrettyPrint(true)
            //output tree:ToText()
            focus = recent
            return tree
        end
        return undefined
    end

    private action RegenerateRoot(JavaScriptObjectNotation nodes)
        if regenerateRoot
            JavaScriptObjectNotation rootNode = GenerateWindowNode()
            nodes:Add(rootNode)

            regenerateRoot = false
        end
    end

    private action GetBoundingRectangle(Item item) returns JavaScriptObjectNotation
        JavaScriptObjectNotation bounds
        bounds:SetKey("bounds")

        number left = 0
        number top = 0
        number width = 0
        number height = 0

        GameStateManager manager
        GameDisplay gd = manager:GetGameDisplay()
        if gd not= undefined and gd is DesktopDisplay
            DesktopDisplay display = cast(DesktopDisplay, gd)
            number windowX = display:GetDisplayX()
            number windowY = display:GetDisplayY()
            number windowHeight = display:GetHeight()
    
            if item is Item2D
                Item2D i2 = cast(Item2D, item)
                number itemX = i2:GetScreenX()
                number itemY = i2:GetScreenY()
                //output "Name: " + item:GetName() + "x: " + itemX + ", y: " + itemY
                if not itemX:IsNotANumber() and not itemY:IsNotANumber()
                    left = windowX + itemX
                    top = windowY + (windowHeight - (itemY + i2:GetHeight()))
                    width = i2:GetWidth()
                    height = i2:GetHeight()
                end
            elseif item is Item3D
                Item3D i3 = cast(Item3D, item)
                Rectangle rectangle = i3:GetScreenBounds()
                top = windowX + rectangle:GetX()
                left = windowY + (windowHeight - (rectangle:GetY() + rectangle:GetHeight()))
                width = rectangle:GetWidth()
                height = rectangle:GetHeight()
            end

        end

        JavaScriptObjectNotation rect
        rect:Add("left", left)
        rect:Add("top", top)
        rect:Add("width", width)
        rect:Add("height", height)

        bounds:Add("rect", rect)
        return bounds
    end

    private action AddItemToJavaScriptObjectNotation(JavaScriptObjectNotation note, Item item)
        JavaScriptObjectNotation node
        integer id = item:GetHashCode()
        node:Add("id", id)
        node:Add("role", GetItemRole(item))
        node:Add("name", item:GetName())

        node:Add(GetBoundingRectangle(item))

        Array<integer> kids
        GetChildrenList(kids, item)
        JavaScriptObjectNotation children = ConvertChildArray(kids)
        node:Add(children)
        
        note:Add(node)
    end

    private action GetItemRole(Item item) returns text
        if roleTable:HasKey(item:GetAccessibilityCode())
            return roleTable:GetValue(item:GetAccessibilityCode())
        end        

        return "unknown"
    end

    private action ConvertChildArray(Array<integer> kids) returns JavaScriptObjectNotation
        JavaScriptObjectNotation note
        note:SetKey("children")
        note:SetArray()

        i = 0
        repeat while i < kids:GetSize()
            integer hash = kids:Get(i)
            note:Add(hash)
            i = i + 1
        end
        return note
    end

    private action GetChildrenList(Array<integer> kids, Item item)
        i = 0
        repeat while i < item:GetItemCount()
            Item kid = item:GetChildAsItem(i)
            if kid:GetAccessibilityCode() = kid:NOT_ACCESSIBLE
                GetChildrenList(kids, kid)
            else
                integer value = kid:GetHashCode()
                kids:Add(value)
            end
            
            i = i + 1
        end
    end

    private action GenerateWindowNode returns JavaScriptObjectNotation
        JavaScriptObjectNotation windowNode
        windowNode:Add("id", rootName)
        windowNode:Add("role", "window")

        GameStateManager gameState
        GameDisplay display = gameState:GetGameDisplay()
        integer width = display:GetWidth()
        integer height = display:GetHeight()

        JavaScriptObjectNotation bounds
        JavaScriptObjectNotation rect
        rect:Add("left",0)
        rect:Add("top",0)
        rect:Add("width",width)
        rect:Add("height",height)
        bounds:Add("rect", rect)
        windowNode:Add("bounds", bounds)

        Game game = gameState:GetGame()
        
        windowNode:Add("name", game:GetGameName())

        JavaScriptObjectNotation kids
        kids:SetKey("children")
        kids:SetArray()

        Iterator<Item> roots = rootItems:GetValueIterator() //we should put these down
        repeat while roots:HasNext()
            Item item = roots:Next()
            kids:Add(item:GetHashCode())
        end

        //windowNode:Add(kids)
        //windowNode:SetPrettyPrint(true)
        //output windowNode:ToText()
        return windowNode
    end

    action Setup
        JavaScriptObjectNotation first
        first:SetPrettyPrint(true)

        JavaScriptObjectNotation nodes
        nodes:SetArray()

        nodes:Add(GenerateWindowNode())

        //Now add the tree and the root stuff.
        JavaScriptObjectNotation tree = GenerateTree()
        first:Add("nodes", nodes)
        first:Add(tree)
        first:Add("root", rootName)
        
        //output first:ToText()
        SetupNative(first:ToText())
        output "Setup"
    end

    private system action SetupNative(text json)

    private action GenerateTree returns JavaScriptObjectNotation
        JavaScriptObjectNotation tree
        tree:SetKey("tree")
        tree:Add("id", "quorum-star-wars-1")
        tree:Add("sourceStringEncoding", "utf16")
        if focus not= undefined
            tree:Add("focus", focus:GetHashCode())
        end
        return tree        
    end

    action ProgressBarValueChanged(ProgressBarValueChangedEvent progress)
        ProgressBar value = progress:GetProgressBar()
        ItemEdited(value)
    end

    system action SelectionChanged(SelectionEvent event)

    system action ButtonActivated(Button button)

    action ToggleButtonToggled(ToggleButton item)
        ItemEdited(item)
    end

    /* It doesn't make sense, but this isn't called. We update in the update loop instead. */
    action FocusChanged(FocusEvent event)
    end

    action Add(Item item) 
        if item:GetAccessibilityCode() not= item:NOT_ACCESSIBLE
            ItemEdited(item)

            Item mom = item:GetAccessibleParent()
            if mom = undefined //the root is our parent.
                rootItems:Add(item:GetHashCode(), item)
                regenerateRoot = true
            else 
                ItemEdited(mom)
            end
            
        end
        
        i = 0
        repeat while i < item:GetItemCount()
            Add(item:GetChildAsItem(i))
            i = i + 1
        end
    end

    action Remove(Item item)
        Item mom = item:GetAccessibleParent()
        if mom = undefined //the root is our parent.
            rootItems:RemoveKey(item:GetHashCode())
            regenerateRoot = true
        else
            ItemEdited(mom)
        end
    end

    private action AddChildren(Item item)
        if item is Item2D
            Item2D temp = cast(Item2D, item)
            Array<Item2D> children = temp:GetChildren()
            
            integer counter = 0

            repeat while counter < children:GetSize()
                Add(children:Get(counter))
                counter = counter + 1
            end

        elseif item is Item3D
            Item3D temp = cast(Item3D, item)
            Iterator<Item3D> children = temp:GetItems()

            Item3D child = undefined

            repeat while children:HasNext()
                child = children:Next()
                Add(child)
            end
        end
    end

    

    action MenuChanged(MenuChangeEvent event)
        MenuItem item = event:GetMenuItem()
        ItemEdited(item)
    end

    action TreeChanged(TreeChangeEvent event)
        TreeItem item = event:GetTreeItem()
        ItemEdited(item)
    end

    action TreeTableChanged(TreeTableChangeEvent event)
        
    end

    system action ControlActivated(ControlActivationEvent event)

    system action TextChanged(TextChangeEvent event)

    system action WindowFocusChanged(WindowFocusEvent event)

    system action Notify(Item item, text value)

    system action Notify(Item item, text value, integer notificationType)

    system action Shutdown

    action IsScreenReaderListening returns boolean return false end
end