package Libraries.Interface.Accessibility

use Libraries.Interface.Item
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Events.TreeChangeEvent
use Libraries.Interface.Events.TreeTableChangeEvent
use Libraries.Interface.Events.ControlActivationEvent
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Interface.Events.WindowFocusEvent
use Libraries.Interface.Controls.Button
use Libraries.Interface.Controls.ToggleButton
use Libraries.Interface.Controls.TextField
use Libraries.Interface.Events.ProgressBarValueChangedEvent
use Libraries.Interface.Accessibility
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Interface.Item3D
use Libraries.Containers.Iterator
use Libraries.Interface.Item2D
use Libraries.Containers.Array
use Libraries.Game.GameStateManager
use Libraries.Game.GameDisplay
use Libraries.Game.Game
use Libraries.Containers.HashTable


class AccessKitAccessibility is Accessibility
    integer rootName = 1
    HashTable<integer, Item> rootItems
    boolean regenerateRoot = false
    HashTable<integer, Item> edits
    
    system action NameChanged(Item item)

    system action DescriptionChanged(Item item)

    system action TextFieldUpdatePassword(TextField field)

    action Update
        if not edits:IsEmpty()
            JavaScriptObjectNotation note
            note:SetPrettyPrint(true)
    
            JavaScriptObjectNotation nodes
            nodes:SetArray()
    
            note:Add("nodes", nodes)
    
            Iterator<Item> items = edits:GetValueIterator()
            repeat while items:HasNext() 
                Item item = items:Next()
                AddItemToJavaScriptObjectNotation(nodes, item)
            end
    
            RegenerateRoot(nodes)
            
            edits:Empty()
            output note:ToText()
        end
    end

    private action RegenerateRoot(JavaScriptObjectNotation nodes)
        if regenerateRoot
            JavaScriptObjectNotation rootNode = GenerateWindowNode()
            nodes:Add(rootNode)

            regenerateRoot = false
        end
    end

    private action AddItemToJavaScriptObjectNotation(JavaScriptObjectNotation note, Item item)
        JavaScriptObjectNotation node
        integer id = item:GetHashCode()
        node:Add("id", id)
        node:Add("name", item:GetName())

        Array<integer> kids
        GetChildrenList(kids, item)
        JavaScriptObjectNotation children = ConvertChildArray(kids)
        node:Add(children)
        
        note:Add(node)
    end

    private action ConvertChildArray(Array<integer> kids) returns JavaScriptObjectNotation
        JavaScriptObjectNotation note
        note:SetKey("children")
        note:SetArray()

        i = 0
        repeat while i < kids:GetSize()
            integer hash = kids:Get(i)
            note:Add(hash)
            i = i + 1
        end
        return note
    end

    private action GetChildrenList(Array<integer> kids, Item item)
        i = 0
        repeat while i < item:GetItemCount()
            Item kid = item:GetChildAsItem(i)
            if kid:GetAccessibilityCode() = kid:NOT_ACCESSIBLE
                GetChildrenList(kids, kid)
            else
                integer value = kid:GetHashCode()
                kids:Add(value)
            end
            
            i = i + 1
        end
    end

    private action GenerateWindowNode returns JavaScriptObjectNotation
        JavaScriptObjectNotation windowNode
        windowNode:Add("id", rootName)
        windowNode:Add("role", "window")

        GameStateManager gameState
        GameDisplay display = gameState:GetGameDisplay()
        integer width = display:GetWidth()
        integer height = display:GetHeight()

        JavaScriptObjectNotation bounds
        JavaScriptObjectNotation rect
        rect:Add("left",0)
        rect:Add("top",0)
        rect:Add("width",width)
        rect:Add("height",height)
        bounds:Add("rect", rect)
        windowNode:Add("bounds", bounds)

        Game game = gameState:GetGame()
        
        windowNode:Add("name", game:GetGameName())

        JavaScriptObjectNotation kids
        kids:SetKey("children")
        kids:SetArray()

        Iterator<Item> roots = rootItems:GetValueIterator() //we should put these down
        repeat while roots:HasNext()
            Item item = roots:Next()
            kids:Add(item:GetHashCode())
        end

        windowNode:Add(kids)
        return windowNode
    end

    action Setup
        JavaScriptObjectNotation first
        first:SetPrettyPrint(true)

        JavaScriptObjectNotation nodes
        nodes:SetArray()

        nodes:Add(GenerateWindowNode())

        //Now add the tree and the root stuff.
        JavaScriptObjectNotation tree
        tree:Add("id", "quorum-star-wars-1")
        tree:Add("sourceStringEncoding", "utf16")

        first:Add("nodes", nodes)
        first:Add("tree", tree)
        first:Add("root", rootName)
        
    end

    system action ProgressBarValueChanged(ProgressBarValueChangedEvent progress)

    system action SelectionChanged(SelectionEvent event)

    system action ButtonActivated(Button button)

    system action ToggleButtonToggled(ToggleButton button)

    system action FocusChanged(FocusEvent event)

    action Add(Item item) 
        if item:GetAccessibilityCode() not= item:NOT_ACCESSIBLE
            edits:Add(item:GetHashCode(), item)

            Item mom = item:GetAccessibleParent()
            if mom = undefined //the root is our parent.
                rootItems:Add(item:GetHashCode(), item)
                regenerateRoot = true
            else 
                edits:Add(mom:GetHashCode(), mom)
            end
            
        end
        
        i = 0
        repeat while i < item:GetItemCount()
            Add(item:GetChildAsItem(i))
            i = i + 1
        end
    end

    action Remove(Item item)
        Item mom = item:GetAccessibleParent()
        if mom = undefined //the root is our parent.
            rootItems:RemoveKey(item:GetHashCode())
            regenerateRoot = true
        else 
            edits:Add(mom:GetHashCode(), mom)
        end
    end

    private action AddChildren(Item item)
        if item is Item2D
            Item2D temp = cast(Item2D, item)
            Array<Item2D> children = temp:GetChildren()
            
            integer counter = 0

            repeat while counter < children:GetSize()
                Add(children:Get(counter))
                counter = counter + 1
            end

        elseif item is Item3D
            Item3D temp = cast(Item3D, item)
            Iterator<Item3D> children = temp:GetItems()

            Item3D child = undefined

            repeat while children:HasNext()
                child = children:Next()
                Add(child)
            end
        end
    end

    

    system action MenuChanged(MenuChangeEvent event)

    system action TreeChanged(TreeChangeEvent event)

    system action TreeTableChanged(TreeTableChangeEvent event)

    system action ControlActivated(ControlActivationEvent event)

    system action TextChanged(TextChangeEvent event)

    system action WindowFocusChanged(WindowFocusEvent event)

    system action Notify(Item item, text value)

    system action Notify(Item item, text value, integer notificationType)

    system action Shutdown

    action IsScreenReaderListening returns boolean return false end
end